%{
#include <iostream>
#include <FlexLexer.h>

// don't necessarily need this all the time - this code uses some
// custom functions ...
#include "MyMemory.hpp"

  // defines my lexical analyzer class 
#include "MyScanner.hpp"

  // bison/yacc requires a fumction called yylex() to get
  // the next token  
#define yylex(x) scanner->lex(x)

using namespace yy;
using namespace std;

%}

%require "3.2"
%language "C++"

%defines "Parser.hpp"
%output "Parser.cpp"
%define api.parser.class {Parser}


%code requires
{

struct myst
{
  int ival; 
  double dval;
  std::string sval;
};

}
%define api.value.type {struct myst}

%parse-param {MyScanner* scanner}





/* bison token  Declarations */
%token ADDOP_T
%token ASSIGNOP_T
%token ID_T
%token LPAREN_T
%token MULOP_T
%token NUM_INT_T
%token NUM_REAL_T
%token RPAREN_T
%token SEMICOLON_T



// if grammar allows multiple interpretations of an expr,
//   these can help ...
//  consider  5-4-3 ... is it 
//      (5-4)-3  (%left)  or
//      5-(4-3)  (%right)   
//  note that the grammar below already automatically forces the first option above
%left ADDOP_T
%left MULOP_T

/* Grammar follows */
%%
start: list ;

list : expr SEMICOLON_T {cout << endl << $1.dval;} list |
        assign SEMICOLON_T list | ;
   
assign: ID_T ASSIGNOP_T expr 
    ;

expr: factor { $$.dval = $1.dval;}  
    | expr ADDOP_T factor
{
  $$.dval = $1.dval + $3.dval;
}
    ;

factor: term
{
  $$.dval = $1.dval ;
}
    | factor MULOP_T term
    ;

term: ID_T { cout << "using term -> ID_T , with rhs ="  << $1.sval << endl;  }
    | NUM_INT_T  { /*cout << "using term -> NUM_INT_T , with rhs ="
		     << $1.ival << endl;*/
  $$.dval = $1.ival ;
                 }
    | NUM_REAL_T { /*cout << "using term -> NUM_REAL_T , with rhs ="
		     << $1.dval << endl;*/
  $$.dval = $1.dval ;
 } 
| LPAREN_T {cout << "found an (" << endl;  } expr RPAREN_T 
    | ADDOP_T term
    ;


%%


void Parser::error(const std::string& msg) {
    std::cerr << msg << " near " << scanner->YYText()  
              << " on line #" << scanner->lineno()
              << endl;
}
